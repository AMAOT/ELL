u8R"(
#if !defined(@@CLASS_GUARD@@)
#define @@CLASS_GUARD@@

#if defined(__cplusplus)

#include <cstring> // memcpy
#include <vector>

#ifndef HIGH_RESOLUTION_TIMER
#define HIGH_RESOLUTION_TIMER
// This is a default implementation of HighResolutionTimer using C++ <chrono> library.  The
// GetMilliseconds function is used in the steppable version of the Predict method.  
// If your platform requires a different implementation then define HIGH_RESOLUTION_TIMER 
// before including this header.
#include <chrono>

class HighResolutionTimer
{
public:
    void Reset()
    {
        _started = false;
    }

    /// <summary> Return high precision number of seconds since first call to Predict. </summary>
    double GetMilliseconds() 
    {    
        if (!_started)
        {
            _start = std::chrono::high_resolution_clock::now();
            _started = true;
        }
        auto now = std::chrono::high_resolution_clock::now();
        auto us = std::chrono::duration_cast<std::chrono::microseconds>(now - _start);
        return static_cast<double>(us.count()) / 1000.0;
    }
private:
    std::chrono::high_resolution_clock::time_point _start;
    bool _started = false;
};
#endif

// This class wraps the "C" interface and provides handy virtual methods you can override to
// intercept any callbacks.  It also wraps the low level float buffers with std::vectors.
// This class can then be wrapped by SWIG which will give you an interface to work with from
// other languages (like Python) where you can easily override those virtual methods.
class @@CLASSNAME@@
{
public:
    @@CLASSNAME@@()
    {
@@CONSTRUCTOR_IMPL@@
    }

    virtual ~@@CLASSNAME@@() = default;

    TensorShape GetInputShape(int index = 0) const
    {    
        TensorShape inputShape;
        @@MODULE@@_GetInputShape(index, &inputShape);
        return inputShape;
    }

    int GetInputSize(int index = 0) const
    {
        return @@MODULE@@_GetInputSize(index);
    }
    
    TensorShape GetOutputShape(int index = 0) const
    {
        TensorShape outputShape;
        @@MODULE@@_GetOutputShape(index, &outputShape);
        return outputShape;
    }

    int GetOutputSize(int index = 0) const
    {
        return @@MODULE@@_GetOutputSize(index);
    }
    
    void Reset()
    {
        @@MODULE@@_Reset();
@@RESET_BODY@@
    }

    bool IsSteppable() const 
    {
        return @@STEPPABLE@@;
    }

    const char* GetMetadata(const char* name) const
    {
        return @@MODULE@@_GetMetadata((char*)name);
    }

@@HELPER_METHODS@@
private:
@@MEMBER_DECLS@@      
};


#if !defined(@@CDECLS_GUARD@@)
#define @@CDECLS_GUARD@@

extern "C"
{
@@CDECLS_IMPL@@
}

#endif // !defined(@@CDECLS_GUARD@@)
#endif // defined(__cplusplus)
#endif // !defined(@@CLASS_GUARD@@)
)"